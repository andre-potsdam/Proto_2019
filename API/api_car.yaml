# --------------------------------------------------
# API for WTC car.
# --------------------------------------------------


openapi: 3.0.0
info:
  version: 1.0.0
  title: ea
servers:
  - url: 'http://x-m1system1/ea'

paths:

  # ------------------------------------------------------------------
  # Paths
  # ------------------------------------------------------------------

  # Paths are ordered according to straight forward application usage.

  # ----- validation -----
  
  /validation:
    post:
      description: Server side validation of any partially provided data.
      tags: [ Validation ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
                  $ref: '#/components/schemas/ValidationRequest'
      responses:
        '200':
          description: Validation result is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'

                
  # ----- vehicle search -----

  /vehicleSearch:
    get:
      description: Vehicle search with HSN/TSN.
      tags: [ VehicleSearch ]
      parameters: 
        - in: query
          name: hsn
          required: true
          schema:
            type: string
        - in: query
          name: tsn
          required: true
          schema:
            type: string
        - in: query
          name: manufYear
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Search result is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleSearchResponse'
        '404':
          description: Vehicle not found.


  # ----- logging -----

  /log:
    post:
      description:
        Write any information from client into server logfile.
      tags: [ Logging ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogRequest'
      responses:
        '200':
          description: Information was logged.

       
components:
       
  schemas:
  
  # ------------------------------------------------------------------
  # schemas: offer
  # ------------------------------------------------------------------
  
    # ----- situation -----
    
    SituationType:
      enum:
        - EXISTING_CAR
        - NEW_CAR
    
    Situation:
      properties:
        situationType:
          $ref: '#/components/schemas/SituationType'   
        insuranceBegin:
          type: string
          format: date
    

    # ----- vehicle, type: car -----

    Vehicle:
      properties:
        hsn:
          type: string
        tsn:
          type: string
        manufacturingYear:
          type: integer
        purchaseYear:
          type: integer
        purchaseValue:
          type: string

          
    # ----- vehicle usage -----
    
    VehicleUsageKind:
      enum:
        - PRIVATE
        - BUSINESS
        
    ParkingPlace:
      enum:
        - GARAGE
        - PARKHOUSE
        - STREET
        - CARPORT
    
    HomeOwnership:
      enum:
        - NO_INFORMATION
        - NO_OWNERSHIP
        - OWN_FLAT
        - OWN_HOUSE
    
    VehicleUsage:
      properties:
        usageKind:
          $ref: '#/components/schemas/VehicleUsageKind'   
        milage:
          description: yearly milage in 1000 kilometres
          type: integer
        isSeasonPlate:
          type: boolean
        seasonPlateBeginMonth:
          type: integer
        seasonPlateEndMonth:
          type: integer
        homeOwnership:
          $ref: '#/components/schemas/HomeOwnership' 
        parkingPlace:
          $ref: '#/components/schemas/ParkingPlace'   
        

    # ----- person, company -----
    
    Address:
      properties:
        street:
          type: string
        streetNumber:
          type: string
        zipCode:
          type: string
        city:
          type: string
        
    Contact:
      properties:
        mail:
          type: string
        mobilePrefix:
          type: string
        mobileNumber:
          type: string
          
    Gender:
      enum:
        - MALE
        - FEMALE

    Occupation:
      enum:
        - ANGESTELLTER
        - BEAMTER
        - ARBEITER
        - RENTNER
        - STUDENT
        - SELBSTSTAENDIG
        - AUSZUBILDENDER
        - BERUFSSOLDAT
        - LANDWIRT
        - NONE

    MaritalStatus:
      enum:
        - LEDIG
        - VERHEIRATED
        - GESCHIEDEN
        - VERWITWET
        - LEBENSGEMEINSCHAFT
          
    Person:
      properties:
        gender:
          $ref: '#/components/schemas/Gender'   
        firstName:
          type: string
        lastName:
          type: string
        address:
          $ref: '#/components/schemas/Address'   
        contact:
          $ref: '#/components/schemas/Contact'   
        birthday:
          type: string
          format: date
        occupation:
          $ref: '#/components/schemas/Occupation'   
        maritalStatus:
          $ref: '#/components/schemas/MaritalStatus'   

    Business:
      enum:
        - HANDEL
        - GEWERBE
        - BAU
        - BANKEN
        - INDUSTRIE

    Company:
      properties:
        name:
          type: string
        business:
          $ref: '#/components/schemas/Business'           
      
          
    # ----- offer -----

    Offer:
      properties:
        situation:
          $ref: '#/components/schemas/Situation'
        vehicle:
          $ref: '#/components/schemas/Vehicle'
        vehicleUsage:
          $ref: '#/components/schemas/VehicleUsage'
    
    

    # ------------------------------------------------------------------
    # schemas: validation
    # ------------------------------------------------------------------
    
    ValidationRequest:
      properties:
        offer:
          $ref: '#/components/schemas/Offer'
        ruleset:
          type: string
          
    ValidationResponse:
      properties:
        validationResult:
          $ref: '#/components/schemas/ValidationResult'

    ValidationResult:
      properties:
        errors:
          type: array
          items:
            type: object
            required: [msgId]
            properties:
              fieldPath:
                description: |
                  Path of affected field within offer, e.g. vehicle/HSN, vehicleUsage/usageKind.
                  If NOT provided, the error is of global nature, and not assignable to a single field.
                type: string
              msgId:
                description: Short ID for the validation error, e.g. UWE rule name.
                type: string
              msg:
                description: Full description of the validation problem.
                type: string
      example:
          errors:
            - fieldId: policyHolder/firstName
              msgId: C000014
              msg: Name must have more than 1 character.
            - fieldId: policyHolder/lastName
              msgId: C000012
              msg: Digits are forbidden in name.


    # ------------------------------------------------------------------
    # schemas: vehicle search
    # ------------------------------------------------------------------
    
    VehicleSearchRequest:
      required: [hsn,tsn,manufYear]
      properties:
        hsn:
          type: string
        tsn:
          type: string
        manufYear:
          type: integer

    VehicleSearchResponse:
      properties:
        vehicleSearchResult:
          $ref: '#/components/schemas/VehicleSearchResult'

    VehicleSearchResult:
      description: |
        Contains all vehicle data after vehicle search in backend. |
        Further this is required as input for subsequent coverage check.
      properties:
        manufacturer:
          type: string
        model:
          type: string
        group:
          type: string
        riskCategory:
          type: string


    # ------------------------------------------------------------------
    # schemas: logging
    # ------------------------------------------------------------------

    LogLevel:
      enum: 
        - INFO
        - ERROR

    LogRequest:
      required: [level,shortMsg]
      properties:
        level:
          $ref: '#/components/schemas/LogLevel'
        component:
          description: Affected component at client side.
          type: string
        shortMsg:
          type: string
        longMsg:
          type: string
          
         
